diff -ru SharedHT2/src/Fit_F.c ../SharedHT2/src/Fit_F.c
--- SharedHT2/src/Fit_F.c	2005-07-01 11:36:30.000000000 +0100
+++ ../SharedHT2/src/Fit_F.c	2005-08-24 10:36:22.000000000 +0100
@@ -4,9 +4,9 @@
 
 typedef struct{
   double *S;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } DataEV;
 
 typedef double optimfn(int n, double *par, void *ex);
@@ -27,9 +27,9 @@
 optimfn loglikEV;
 optimgr GloglikEV, *gradEV;
 
-void Fit_F(double *ptheta0, double *S, long *pN, long *pd, long *pnreps,
-                 long *pverbose, double *objval, double *estimate, long *fail,
-                 long *fncount, long *grcount, long *mask, long *usegr,
+void Fit_F(double *ptheta0, double *S, int *pN, int *pd, int *pnreps,
+                 int *pverbose, double *objval, double *estimate, int *fail,
+                 int *fncount, int *grcount, int *mask, int *usegr,
                  double *G, double *H)
 {
   int inpar=2, *ifail, *ifncount, *imask, verb;
@@ -69,8 +69,8 @@
 
 double loglikEV(int inpar, double *theta, void *yy)
 {
-  long N, d, h;
-  long *nreps;
+  int N, d, h;
+  int *nreps;
   double xd, loglik, logC, s, r, xn, xn1_o2, xn2_o2, q, q_o2r;
   double *S;
   DataEV *y;
@@ -101,8 +101,8 @@
 
 void GloglikEV(int inpar, double *theta, double *G, void *yy)
 {
-  long N, d, h;
-  long *nreps;
+  int N, d, h;
+  int *nreps;
   double xd, g1, g2, s, r, xn, xn1_o2, xn2_o2, q, q_o2r;
   double *S;
   DataEV *y;
@@ -134,10 +134,10 @@
 
 void fHESSEV(double *x, DataEV *y, double *G, double *H, optimgr *grad)
 {
-  long i,j,d,npar;
+  int i,j,d,npar;
   double h,temp,*G1;
   int inpar=2;
-  npar = (long)inpar;
+  npar = (int)inpar;
 
   d = *y->pd;
   G1 = (double *)Calloc(npar, double);
diff -ru SharedHT2/src/Fit_MVF.c ../SharedHT2/src/Fit_MVF.c
--- SharedHT2/src/Fit_MVF.c	2005-07-07 04:20:29.000000000 +0100
+++ ../SharedHT2/src/Fit_MVF.c	2005-08-24 10:35:59.000000000 +0100
@@ -4,19 +4,19 @@
 #define MDXMIN 2.470328e-323
 typedef struct{
   double *MVM;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } Data;
 
 typedef double optimfn(int n, double *par, void *ex);
 typedef void optimgr(int n, double *par, double *gr, void *ex);
 
-void tloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-             long *pnreps, double *pans);
+void tloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+             int *pnreps, double *pans);
 
-void tGloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-              long *pnreps, double *pG);
+void tGloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+              int *pnreps, double *pG);
 
 void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
            int *fail, double abstol, double intol, void *ex,
@@ -30,23 +30,23 @@
 
 void fHESS(double *x, Data *y, double *G, double *H, optimgr *grad);
 
-double lmgamma(double a, long m);
-double dimgamma(double a, long m);
-double trimgamma(double a, long m);
-double det(double *x, double *xd2buff, long *pd);
-void chol(double *s, double *t, long *pd);
-void matinv(double *a, double *ainv, long *pd);
-void printmat(double *pA, long nr, long nc, char *name);
+double lmgamma(double a, int m);
+double dimgamma(double a, int m);
+double trimgamma(double a, int m);
+double det(double *x, double *xd2buff, int *pd);
+void chol(double *s, double *t, int *pd);
+void matinv(double *a, double *ainv, int *pd);
+void printmat(double *pA, int nr, int nc, char *name);
 
 optimfn loglik;
 optimgr Gloglik, *grad;
 
-void Fit_MVF(double *ptheta0, double *MVM, long *pN, long *pd,
-		long *pnreps, long *pverbose, double *objval, 
-                double *estimate, long *fail, long *fncnt, long *grcnt, 
-                long *mask, long *usegr, double *G, double *H)
+void Fit_MVF(double *ptheta0, double *MVM, int *pN, int *pd,
+		int *pnreps, int *pverbose, double *objval, 
+                double *estimate, int *fail, int *fncnt, int *grcnt, 
+                int *mask, int *usegr, double *G, double *H)
 {
-  long npar, d, d2, N, i;
+  int npar, d, d2, N, i;
   int inpar, *ifail, *ifncnt, *igrcnt, *imask, verb;
   double xd, xN;
   Data *y;
@@ -97,10 +97,10 @@
 
 double loglik(int p, double *theta, void *yy)
 {
-  long N, d, d2, h, i, j, k, l;
+  int N, d, d2, h, i, j, k, l;
   double xd, xnreps, nu, detL, detS, detSplL, u, v, logl, logK;
 
-  long *nreps, *pd;
+  int *nreps, *pd;
   double *MVM, *Lambdahlf, *Lambda, *xd2buff, *SplL;
   Data *y;
 
@@ -164,11 +164,11 @@
 
 void Gloglik(int inpar, double *theta, double *G, void *yy)
 {
-  long   N, d, d2, d4, npar, npar2, nparm1;
-  long   j, k, l, h, i1, i2, j2;
+  int   N, d, d2, d4, npar, npar2, nparm1;
+  int   j, k, l, h, i1, i2, j2;
   double xd, xnreps, nu, detL, detS, detSplL, v, eth0;
 
-  long   *nreps, *pd;
+  int   *nreps, *pd;
   double *MVM, *Lambdahlf, *Lambda, *Lambdainv, *xd2buff;
   double *SplL, *SplLinv, *dvecBdtheta, *dvecBprdtheta, *FactorII;
   double *Prod, *IxBpr, *BprxI, *IxLi, *IxSplLi, *FactorI;
@@ -360,9 +360,9 @@
 
 }
 
-double lmgamma(double a, long m)
+double lmgamma(double a, int m)
 {
-  long i;
+  int i;
   double pi=3.141592653589793, s=0.0, xm, xi;
 
   xm = (double) m;
@@ -375,9 +375,9 @@
   return s;
 }
 
-double dimgamma(double a, long m)
+double dimgamma(double a, int m)
 {
-  long i;
+  int i;
   double s=0.0, xi;
 
   for(i=0;i<m;i++){
@@ -387,9 +387,9 @@
   return s;
 }
 
-double trimgamma(double a, long m)
+double trimgamma(double a, int m)
 {
-  long i;
+  int i;
   double s=0.0, xi;
 
   for(i=0;i<m;i++){
@@ -399,9 +399,9 @@
   return s;
 }
 
-double det(double *x, double *xd2buff, long *pd)
+double det(double *x, double *xd2buff, int *pd)
 {
-        long d, i;
+        int d, i;
 	double tmp, ans;
 
         d = *pd;
@@ -417,17 +417,17 @@
 	return ans;
 }
 
-void tdet(double *x, double *xd2buff, long *pd, double *pans)
+void tdet(double *x, double *xd2buff, int *pd, double *pans)
 {
 	*pans = det(x, xd2buff, pd);
 }
 
-void tloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-             long *pnreps, double *pans)
+void tloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+             int *pnreps, double *pans)
 {
   Data *y;
   int inpar;
-  long d, npar;
+  int d, npar;
   y = (Data *)S_alloc(1, sizeof(Data));
 
   y->MVM = MVM;
@@ -443,11 +443,11 @@
 
 }
 
-void tGloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-              long *pnreps, double *pG)
+void tGloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+              int *pnreps, double *pG)
 {
   Data *y;
-  long d, npar;
+  int d, npar;
   int inpar;
 
   y = (Data *)S_alloc(1, sizeof(Data));
@@ -466,7 +466,7 @@
 
 void fHESS(double *x, Data *y, double *G, double *H, optimgr *grad)
 {
-  long i,j,d,npar;
+  int i,j,d,npar;
   double h,temp,*G1;
   int inpar;
 
@@ -492,9 +492,9 @@
 
 }
 
-void printmat(double *pA, long nr, long nc, char *name)
+void printmat(double *pA, int nr, int nc, char *name)
 {
-  long j, k;
+  int j, k;
 
   Rprintf("%s = \n", name);
   for (j=0;j<nr;j++) {
diff -ru SharedHT2/src/SimMVN_IW.c ../SharedHT2/src/SimMVN_IW.c
--- SharedHT2/src/SimMVN_IW.c	2005-08-12 12:29:28.000000000 +0100
+++ ../SharedHT2/src/SimMVN_IW.c	2005-08-24 10:27:19.000000000 +0100
@@ -27,20 +27,20 @@
 
 typedef struct{
   double *MVM;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } Data;
 
 typedef struct{
   double *S;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } DataEV;
 
 typedef struct{
-  long id;
+  int id;
   double mean;
   double ShHT2;
   double ShHT2pval;
@@ -58,11 +58,11 @@
 
 CmprFun cmprShHT2, cmprHT2, cmprShUT2, cmprUT2, *cmpr;
 
-void tloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-             long *pnreps, double *pans);
+void tloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+             int *pnreps, double *pans);
 
-void tGloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-              long *pnreps, double *pG);
+void tGloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+              int *pnreps, double *pG);
 
 void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
            int *fail, double abstol, double intol, void *ex,
@@ -76,33 +76,33 @@
 
 void fHESS(double *x, Data *y, double *G, double *H, optimgr *gr);
 
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void matinv(double *a, double *yvv, long *pm);
-void rnormn(long *pn, double *ans);
-
-void printmat(double *pA, long nr, long nc, char *name);
-
-void Fit_MVF1(double *ptheta0, long *pverbose, Data *y, double *objval, 
-		 double *estimate, long *fail, long *fncnt, long *grcnt, 
-                 long *mask, long *usegr, double *G, double *H);
-
-void Fit_F1(double *ptheta0, long *pverbose, DataEV *y, double *objval, 
-                  double *estimate, long *fail, long *fncnt, long *grcnt, 
-                  long *mask, long *usegr, double *G, double *H);
-
-void printglist(gene *x, long N, char *strng);
-
-void SimMVN_IW(long *verb, long *fail, long *fncnt, long *grcnt, long *mask, 
-               long *usegr, long *pnsim, double *nu, double *Lbdinvhlf, long *pd, 
-               long *pnreps, long *pN, double *es, double *coef, double *coefEV, 
-               double *FDRlist, long *pnFDRlist, double *fdrtbl, double *roctbl)
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void matinv(double *a, double *yvv, int *pm);
+void rnormn(int *pn, double *ans);
+
+void printmat(double *pA, int nr, int nc, char *name);
+
+void Fit_MVF1(double *ptheta0, int *pverbose, Data *y, double *objval, 
+		 double *estimate, int *fail, int *fncnt, int *grcnt, 
+                 int *mask, int *usegr, double *G, double *H);
+
+void Fit_F1(double *ptheta0, int *pverbose, DataEV *y, double *objval, 
+                  double *estimate, int *fail, int *fncnt, int *grcnt, 
+                  int *mask, int *usegr, double *G, double *H);
+
+void printglist(gene *x, int N, char *strng);
+
+void SimMVN_IW(int *verb, int *fail, int *fncnt, int *grcnt, int *mask, 
+               int *usegr, int *pnsim, double *nu, double *Lbdinvhlf, int *pd, 
+               int *pnreps, int *pN, double *es, double *coef, double *coefEV, 
+               double *FDRlist, int *pnFDRlist, double *fdrtbl, double *roctbl)
 {
-  long i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
-  long ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP;
-  long *lbuff, *pnpar;
+  int i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
+  int ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP;
+  int *lbuff, *pnpar;
   char *itfnm;
 
-  double mu, xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl;
+  double xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl;
   double Top, stat1, stat2, stat3, stat4, pval1, pval2, pval3, pval4;
 
   double *df, *pW, *SgmHlf, *xbuff, *x2buff, *muhat, *res, *Sighat;
@@ -131,8 +131,8 @@
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
 
-  lbuff       = (long   *)S_alloc(        1, sizeof(  long));
-  pnpar       = (long   *)S_alloc(        1, sizeof(  long));
+  lbuff       = (int   *)S_alloc(        1, sizeof(  int));
+  pnpar       = (int   *)S_alloc(        1, sizeof(  int));
 
   df          = (double *)S_alloc(        1, sizeof(double));
   pW          = (double *)S_alloc(       d2, sizeof(double));
@@ -183,7 +183,7 @@
   /*  name the 'iterno' file uniquely  */
   strcat(itfnm, "iterno");
   for(i=0;i<8;i++) {
-    indx = (long) (62.0*unif_rand());
+    indx = (int) (62.0*unif_rand());
     *ch = *(alnu + indx);
     strncat(itfnm, ch, 1);
   }
@@ -518,12 +518,12 @@
   fclose(itfnm_ptr);
 }
 
-void Fit_MVF1(double *ptheta0, long *pverbose, Data *y, double *objval, 
-		 double *estimate, long *fail, long *fncnt, long *grcnt, 
-                 long *mask, long *usegr, double *G, double *H)
+void Fit_MVF1(double *ptheta0, int *pverbose, Data *y, double *objval, 
+		 double *estimate, int *fail, int *fncnt, int *grcnt, 
+                 int *mask, int *usegr, double *G, double *H)
 {
   int verb, inpar, *ifail, *ifncnt, *igrcnt, *imask;
-  long d, npar, i;
+  int d, npar, i;
   optimfn loglik;
   optimgr Gloglik, *grad;
 
@@ -555,9 +555,9 @@
   fHESS(estimate, y, G, H, grad);
 }
 
-void Fit_F1(double *ptheta0, long *pverbose, DataEV *y, double *objval, 
-                  double *estimate, long *fail, long *fncnt, long *grcnt, 
-                  long *mask, long *usegr, double *G, double *H)
+void Fit_F1(double *ptheta0, int *pverbose, DataEV *y, double *objval, 
+                  double *estimate, int *fail, int *fncnt, int *grcnt, 
+                  int *mask, int *usegr, double *G, double *H)
 {
   int verb, *ifail, *ifncnt, *igrcnt, *imask, inpar=2;
   optimfn loglikEV;
@@ -620,9 +620,9 @@
   return(1*(x->UT2pval > y->UT2pval) - 1*(x->UT2pval < y->UT2pval));
 }
 
-void printglist(gene *x, long N, char *strng)
+void printglist(gene *x, int N, char *strng)
 {
-  long l;
+  int l;
   Rprintf("%s:\n",strng);
   Rprintf("   id     ShHT2 ShHT2pval       HT2   HT2pval     ShUT2 ShUT2pval");
   Rprintf("       UT2   UT2pval\n");
diff -ru SharedHT2/src/SimMVN_mxIW.c ../SharedHT2/src/SimMVN_mxIW.c
--- SharedHT2/src/SimMVN_mxIW.c	2005-08-15 10:26:53.000000000 +0100
+++ ../SharedHT2/src/SimMVN_mxIW.c	2005-08-24 10:38:26.000000000 +0100
@@ -43,6 +43,8 @@
 #include<R.h>
 #include<Rmath.h>
 
+void chol(double *s, double *t, int *pd);
+
 #define EPS 1.0e-7
 #define vabsmax(v, n, l, a, sgn) a=0.0;                             \
                                  for(l=0;l<n;l++)                   \
@@ -56,20 +58,20 @@
 
 typedef struct{
   double *MVM;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } Data;
 
 typedef struct{
   double *S;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } DataEV;
 
 typedef struct{
-  long id;
+  int id;
   double mean;
   double ShHT2;
   double ShHT2pval;
@@ -87,11 +89,11 @@
 
 CmprFun cmprShHT2, cmprHT2, cmprShUT2, cmprUT2, *cmpr;
 
-void tloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-             long *pnreps, double *pans);
+void tloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+             int *pnreps, double *pans);
 
-void tGloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-              long *pnreps, double *pG);
+void tGloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+              int *pnreps, double *pG);
 
 void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
            int *fail, double abstol, double intol, void *ex,
@@ -106,38 +108,38 @@
 void fHESS(double *x, Data *y, double *G, double *H, 
 	   void (*grad)(int p, double *x, double *G, Data *y));
 
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void matinv(double *a, double *yvv, long *pm);
-void rnormn(long *pn, double *ans);
-
-void printmat(double *pA, long nr, long nc, char *name);
-
-void Fit_MVF1(double *ptheta0, long *pverbose, Data *y, double *objval,
-                 double *estimate, long *fail, long *fncnt, long *grcnt, 
-                 long *mask, long *usegr, double *G, double *H);
-
-void Fit_F1(double *ptheta0, long *pverbose, DataEV *y, double *objval, 
-                  double *estimate, long *fail, long *fncnt, long *grcnt, 
-                  long *mask, long *usegr, double *G, double *H);
-
-void printglist(gene *x, long N, char *strng);
-
-void SimMVN_mxIW(long *verb, long *fail, long *fncnt, long *grcnt, long *mask, 
-               long *usegr, long *pnsim, double *nu, double *Lbdinvhlf, long *pd, 
-               long *pnreps, long *pN, double *es, double *f1f2, double *coef, 
-               double *coefEV, double *FDRlist, long *pnFDRlist, 
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void matinv(double *a, double *yvv, int *pm);
+void rnormn(int *pn, double *ans);
+
+void printmat(double *pA, int nr, int nc, char *name);
+
+void Fit_MVF1(double *ptheta0, int *pverbose, Data *y, double *objval,
+                 double *estimate, int *fail, int *fncnt, int *grcnt, 
+                 int *mask, int *usegr, double *G, double *H);
+
+void Fit_F1(double *ptheta0, int *pverbose, DataEV *y, double *objval, 
+                  double *estimate, int *fail, int *fncnt, int *grcnt, 
+                  int *mask, int *usegr, double *G, double *H);
+
+void printglist(gene *x, int N, char *strng);
+
+void SimMVN_mxIW(int *verb, int *fail, int *fncnt, int *grcnt, int *mask, 
+               int *usegr, int *pnsim, double *nu, double *Lbdinvhlf, int *pd, 
+               int *pnreps, int *pN, double *es, double *f1f2, double *coef, 
+               double *coefEV, double *FDRlist, int *pnFDRlist, 
                double *fdrtbl, double *roctbl)
 {
-  long i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
-  long ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP, Jrand;
-  long *lbuff, *pnpar;
+  int i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
+  int ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP, Jrand;
+  int *lbuff, *pnpar;
   char *itfnm;
 
-  double mu, xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl, tstnu, nu_1, nu_2;
+  double xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl, tstnu, nu_1, nu_2;
   double Top, stat1, stat2, stat3, stat4, pval1, pval2, pval3, pval4, zz, lambda, f_1, f_2;
 
   double *df, *pW, *SgmHlf, *xbuff, *muhat, *res, *Sighat, *WSSQ, *ptheta0, *rFDR;
-  double *objv, *estimate, *estimater, *G, *H, *Y, *Sigma, *Lambda_isim, *LbdHlf, *sig;
+  double *objv, *estimate, *G, *H, *Y, *Sigma, *Lambda_isim, *LbdHlf, *sig;
   double *SigInv;
 
   Data *y;
@@ -161,8 +163,8 @@
   mxnreps=0;
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
-  lbuff       = (long   *)S_alloc(        1, sizeof(long));
-  pnpar       = (long   *)S_alloc(        1, sizeof(long));
+  lbuff       = (int   *)S_alloc(        1, sizeof(int));
+  pnpar       = (int   *)S_alloc(        1, sizeof(int));
 
   df          = (double *)S_alloc(        1, sizeof(double));
   pW          = (double *)S_alloc(       d2, sizeof(double));
@@ -222,7 +224,7 @@
   /*  name the 'iterno' file uniquely  */
   strcat(itfnm, "iterno");
   for(i=0;i<8;i++) {
-    indx = (long) (62.0*unif_rand());
+    indx = (int) (62.0*unif_rand());
     *ch = *(alnu + indx);
     strncat(itfnm, ch, 1);
   }
diff -ru SharedHT2/src/SimNorm_IG.c ../SharedHT2/src/SimNorm_IG.c
--- SharedHT2/src/SimNorm_IG.c	2005-08-15 10:24:35.000000000 +0100
+++ ../SharedHT2/src/SimNorm_IG.c	2005-08-24 10:29:26.000000000 +0100
@@ -27,20 +27,20 @@
 
 typedef struct{
   double *MVM;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } Data;
 
 typedef struct{
   double *S;
-  long *pN;
-  long *pd;
-  long *nreps;
+  int *pN;
+  int *pd;
+  int *nreps;
 } DataEV;
 
 typedef struct{
-  long id;
+  int id;
   double mean;
   double ShHT2;
   double ShHT2pval;
@@ -58,11 +58,11 @@
 
 CmprFun cmprShHT2, cmprHT2, cmprShUT2, cmprUT2, *cmpr;
 
-void tloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-             long *pnreps, double *pans);
+void tloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+             int *pnreps, double *pans);
 
-void tGloglik(double *ptheta, double *MVM, long *pN, long *pd, 
-              long *pnreps, double *pG);
+void tGloglik(double *ptheta, double *MVM, int *pN, int *pd, 
+              int *pnreps, double *pG);
 
 void nmmin(int n, double *xin, double *x, double *Fmin, optimfn fn,
            int *fail, double abstol, double intol, void *ex,
@@ -76,33 +76,33 @@
 
 void fHESS(double *x, Data *y, double *G, double *H, optimgr *gr);
 
-void matinv(double *a, double *yvv, long *pm);
-void rnormn(long *pn, double *ans);
+void matinv(double *a, double *yvv, int *pm);
+void rnormn(int *pn, double *ans);
 
-void printmat(double *pA, long nr, long nc, char *name);
+void printmat(double *pA, int nr, int nc, char *name);
 
-void Fit_MVF1(double *ptheta0, long *pverbose, Data *y, double *objval, 
-		 double *estimate, long *fail, long *fncnt, long *grcnt, 
-                 long *mask, long *usegr, double *G, double *H);
+void Fit_MVF1(double *ptheta0, int *pverbose, Data *y, double *objval, 
+		 double *estimate, int *fail, int *fncnt, int *grcnt, 
+                 int *mask, int *usegr, double *G, double *H);
 
-void Fit_F1(double *ptheta0, long *pverbose, DataEV *y, double *objval, 
-                  double *estimate, long *fail, long *fncnt, long *grcnt, 
-                  long *mask, long *usegr, double *G, double *H);
+void Fit_F1(double *ptheta0, int *pverbose, DataEV *y, double *objval, 
+                  double *estimate, int *fail, int *fncnt, int *grcnt, 
+                  int *mask, int *usegr, double *G, double *H);
 
-void printglist(gene *x, long N, char *strng);
+void printglist(gene *x, int N, char *strng);
 
-void SimNorm_IG(long *verb, long *fail, long *fncnt, long *grcnt, long *mask, 
-             long *usegr, long *pnsim, double *shape, double *rate, long *pd, 
-             long *pnreps, long *pN, double *es, double *coef, double *coefEV, 
-             double *FDRlist, long *pnFDRlist, double *fdrtbl, double *roctbl)
+void SimNorm_IG(int *verb, int *fail, int *fncnt, int *grcnt, int *mask, 
+             int *usegr, int *pnsim, double *shape, double *rate, int *pd, 
+             int *pnreps, int *pN, double *es, double *coef, double *coefEV, 
+             double *FDRlist, int *pnFDRlist, double *fdrtbl, double *roctbl)
 {
-  long i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
-  long ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP;
-  long *lbuff, *pnpar;
+  int i, j, k, l, d, npar, npar2, d2, d4, N, nreps, mxnreps, nsim, isim, indx;
+  int ntruepos, nFDRlist, flagsig, Nsig, nTP, nFP;
+  int *lbuff, *pnpar;
   char *itfnm;
 
   double sig, sigma2, sigma;
-  double mu, xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl;
+  double xnreps, xN, xd, sm, smEV, xn2, nu_isim, r, s, vamx, sgn, xl;
   double Top, stat1, stat2, stat3, stat4, pval1, pval2, pval3, pval4;
 
   double *xbuff, *x2buff, *muhat, *res, *Sighat, *WSSQ, *ptheta0, *rFDR;
@@ -129,8 +129,8 @@
   mxnreps=0;
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
-  lbuff       = (long   *)S_alloc(        1, sizeof(long));
-  pnpar       = (long   *)S_alloc(        1, sizeof(long));
+  lbuff       = (int   *)S_alloc(        1, sizeof(int));
+  pnpar       = (int   *)S_alloc(        1, sizeof(int));
 
   xbuff       = (double *)S_alloc(        d, sizeof(double));
   x2buff      = (double *)S_alloc(       d2, sizeof(double));
@@ -176,7 +176,7 @@
   /*  name the 'iterno' file uniquely  */
   strcat(itfnm, "iterno");
   for(i=0;i<8;i++) {
-    indx = (long) (62.0*unif_rand());
+    indx = (int) (62.0*unif_rand());
     *ch = *(alnu + indx);
     strncat(itfnm, ch, 1);
   }
diff -ru SharedHT2/src/SimOneMVN_IW.c ../SharedHT2/src/SimOneMVN_IW.c
--- SharedHT2/src/SimOneMVN_IW.c	2005-07-04 08:04:37.000000000 +0100
+++ ../SharedHT2/src/SimOneMVN_IW.c	2005-08-24 10:30:58.000000000 +0100
@@ -1,20 +1,20 @@
 #include<R.h>
 #include<Rmath.h>
 
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void matinv(double *a, double *yvv, long *pm);
-void rnormn(long *pn, double *ans);
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void matinv(double *a, double *yvv, int *pm);
+void rnormn(int *pn, double *ans);
 
-void printmat(double *pA, long nr, long nc, char *name);
-double chol(double *, double *, long *);
+void printmat(double *pA, int nr, int nc, char *name);
+double chol(double *, double *, int *);
 
-void SimOneMVN_IW(double *nu, double *Lbdinvhlf, long *pd, long *pnreps,
-               long *pN, double *es, double *YY)
+void SimOneMVN_IW(double *nu, double *Lbdinvhlf, int *pd, int *pnreps,
+               int *pN, double *es, double *YY)
 {
-  long i, j, k, l, d, npar, npar2, d2, N, nreps, mxnreps;
-  long *lbuff;
+  int i, j, k, l, d, d2, N, nreps, mxnreps;
+  int *lbuff;
 
-  double mu, xd, sm;
+  double xd, sm;
 
   double *df, *pW, *SgmHlf, *xbuff, *Y;
   double *Sigma, *LbdHlf, *sig, *SigInv;
@@ -27,7 +27,7 @@
   mxnreps=0;
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
-  lbuff       = (long   *)S_alloc(      1,sizeof(long));
+  lbuff       = (int   *)S_alloc(      1,sizeof(int));
 
   df          = (double *)S_alloc(        1, sizeof(double));
   pW          = (double *)S_alloc(       d2, sizeof(double));
@@ -61,7 +61,6 @@
     *lbuff = nreps * d;
     *df = *nu - xd - 1.0;
 
-    /*
     /* First an InvWish_d(nu, Lambda) matrix.  This is done                             */
     /* using the result:  if Sigma^(-1) ~ Wish_d(nu-d-1, Lambda^(-1)) then              */
     /* Sigma ~ InvWish_d(nu, Lambda).  I simulate N i.i.d. Wish_d(nu-d-1,Lambda^(-1))   */
@@ -73,7 +72,6 @@
     /* passed in.  Notice the need to check that Lambda is nonsingular and that         */
     /* nu > 2*d + 2 (required so that the expected value of the inverse wishart         */
     /* is finite.)                                                                      */
-    /*                                                                                  */
     rwishart1(df, pd, Lbdinvhlf, pW);
     matinv(pW, Sigma, pd);
     /*                                                                                  */
diff -ru SharedHT2/src/SimOneMVN_mxIW.c ../SharedHT2/src/SimOneMVN_mxIW.c
--- SharedHT2/src/SimOneMVN_mxIW.c	2005-07-04 08:06:44.000000000 +0100
+++ ../SharedHT2/src/SimOneMVN_mxIW.c	2005-08-24 10:38:46.000000000 +0100
@@ -1,15 +1,17 @@
 #include<R.h>
 #include<Rmath.h>
 
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void matinv(double *a, double *yvv, long *pm);
-void rnormn(long *pn, double *ans);
+void chol(double *s, double *t, int *pd);
 
-void SimOneMVN_mxIW(double *nu, double *Lbdinvhlf, double *f1f2, long *pd, 
-                    long *pnreps, long *pN, double *es, double *YY)
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void matinv(double *a, double *yvv, int *pm);
+void rnormn(int *pn, double *ans);
+
+void SimOneMVN_mxIW(double *nu, double *Lbdinvhlf, double *f1f2, int *pd, 
+                    int *pnreps, int *pN, double *es, double *YY)
 {
-  long i, j, k, l, d, d2, N, nreps, mxnreps, Jrand;
-  long *lbuff;
+  int i, j, k, l, d, d2, N, nreps, mxnreps, Jrand;
+  int *lbuff;
 
   double xd, sm, tstnu, nu_1, nu_2, zz, lambda, f_1, f_2;
 
@@ -23,7 +25,7 @@
   mxnreps=0;
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
-  lbuff         = (long   *)S_alloc(        1,sizeof(long));
+  lbuff         = (int   *)S_alloc(        1,sizeof(int));
 
   df            = (double *)S_alloc(        1, sizeof(double));
   pW            = (double *)S_alloc(       d2, sizeof(double));
diff -ru SharedHT2/src/SimOneNorm_IG.c ../SharedHT2/src/SimOneNorm_IG.c
--- SharedHT2/src/SimOneNorm_IG.c	2005-07-05 19:27:44.000000000 +0100
+++ ../SharedHT2/src/SimOneNorm_IG.c	2005-08-24 10:31:34.000000000 +0100
@@ -25,18 +25,17 @@
                                    }                                \
                                  0
 
-void rnormn(long *pn, double *ans);
+void rnormn(int *pn, double *ans);
 
-void printmat(double *pA, long nr, long nc, char *name);
+void printmat(double *pA, int nr, int nc, char *name);
 
-void SimOneNorm_IG(double *shape, double *rate, long *pd, long *pnreps,
-                   long *pN, double *es, double *YY)
+void SimOneNorm_IG(double *shape, double *rate, int *pd, int *pnreps,
+                   int *pN, double *es, double *YY)
 {
-  long i, j, l, d, N, nreps, mxnreps;
-  long *lbuff;
+  int i, j, l, d, N, nreps, mxnreps;
+  int *lbuff;
 
-  double sig, sigma2, sigma, xd;
-  double Top, stat1, stat2, stat3, stat4, pval1, pval2, pval3, pval4;
+  double sig, sigma2, sigma;
 
   double *xbuff, *Y;
 
@@ -46,7 +45,7 @@
   mxnreps=0;
   for(l=0;l<N;l++) if(mxnreps < *(pnreps+l)) mxnreps = *(pnreps+l);
 
-  lbuff       = (long   *)S_alloc(        1, sizeof(long));
+  lbuff       = (int   *)S_alloc(        1, sizeof(int));
   xbuff       = (double *)S_alloc(        d, sizeof(double));
   Y           = (double *)S_alloc(mxnreps*d, sizeof(double));
 
diff -ru SharedHT2/src/chol.c ../SharedHT2/src/chol.c
--- SharedHT2/src/chol.c	2005-05-25 17:29:32.000000000 +0100
+++ ../SharedHT2/src/chol.c	2005-08-24 10:34:37.000000000 +0100
@@ -2,9 +2,9 @@
 #include <Rmath.h>
 #define MDXMIN 2.470328e-323
 
-void chol(double *s, double *t, long *pd)
+void chol(double *s, double *t, int *pd)
 {
-	long d, d2, i, j, k;
+	int d, d2, i, j, k;
 	double sum, ansij;
 
 	d = *pd;
diff -ru SharedHT2/src/matinv.c ../SharedHT2/src/matinv.c
--- SharedHT2/src/matinv.c	2005-06-02 19:26:58.000000000 +0100
+++ ../SharedHT2/src/matinv.c	2005-08-24 10:24:49.000000000 +0100
@@ -3,23 +3,23 @@
 #include <math.h>
 #include <R.h>
 
-void ludcmp(double *, long, long *, double *);
-void lubksb(double *, long, long *, double *);
+void ludcmp(double *, int, int *, double *);
+void lubksb(double *, int, int *, double *);
 /*                                                        */
-/*  pm : pointer to long, m.                              */
+/*  pm : pointer to int, m.                              */
 /*   a : pointer to double of length m^2                  */
 /* yvv : pointer to a double of length m^2                */
 /*       all space must be allocated in calling routine   */
 /* NOTE: the routine writes over the contents of 'a'      */
 /*                                                        */
-void matinv(double *a, double *yvv, long *pm)
+void matinv(double *a, double *yvv, int *pm)
 {
-	double *yvcol, *dvv, sum, aamax, dum;
-	long i,j, m, *indx;
+	double *yvcol, *dvv;
+	int i,j, m, *indx;
 
 	m = *pm;
 
-	indx = (long *) Calloc(m, long);
+	indx = (int *) Calloc(m, int);
 	 dvv = (double *) Calloc(1, double);
  
 
@@ -40,10 +40,10 @@
 	Free(dvv);
 }
 
-void ludcmp(double *a, long n, long *indx, double *pd)
+void ludcmp(double *a, int n, int *indx, double *pd)
 {
 	double tiny, *vv, aamax, sum, dum, d;
-	long i, j, k, imax;
+	int i, j, k, imax;
 
 	   d = *pd;
 
@@ -100,9 +100,9 @@
 	Free(vv);
 }
 
-void lubksb(double *a, long n, long *indx, double *b)
+void lubksb(double *a, int n, int *indx, double *b)
 {
-	long ii, ll, i, j;
+	int ii, ll, i, j;
 	double sum;
 
 	ii = -1;
diff -ru SharedHT2/src/rgen.c ../SharedHT2/src/rgen.c
--- SharedHT2/src/rgen.c	2005-05-24 03:15:15.000000000 +0100
+++ ../SharedHT2/src/rgen.c	2005-08-24 10:25:41.000000000 +0100
@@ -1,19 +1,19 @@
 #include<R.h>
 #include<Rmath.h>
-void rnormn(long *pn, double *ans);
-void rnormns(long *pn, double *ans);
-void rgamman(long *pn, double *shape, double *scale, double *ans);
-void rgammans(long *pn, double *shape, double *scale, double *ans);
-void trwish1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void rwishart1s(double *pdf, long *pd, double *pSqrtSigma, double *pW);
-void rwishartn(long *pn, double *pdf, long *pd, double *pSqrtSigma, long *prows,
+void rnormn(int *pn, double *ans);
+void rnormns(int *pn, double *ans);
+void rgamman(int *pn, double *shape, double *scale, double *ans);
+void rgammans(int *pn, double *shape, double *scale, double *ans);
+void trwish1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void rwishart1s(double *pdf, int *pd, double *pSqrtSigma, double *pW);
+void rwishartn(int *pn, double *pdf, int *pd, double *pSqrtSigma, int *prows,
 	       double *pW);
 
-void rwishartns(long *pn, double *pdf, long *pd, double *pSqrtSigma, long *prows, 
+void rwishartns(int *pn, double *pdf, int *pd, double *pSqrtSigma, int *prows, 
 		double *pW)
 {
-  long n, d, d2, i, j, k, h, irows;
+  int n, d, d2, i, j, k, h, irows;
   double df, sm, *Z, *Zsig;
   n = *pn;
   df = *pdf;
@@ -68,10 +68,10 @@
   Free(Zsig);
 }
 
-void rwishartn(long *pn, double *pdf, long *pd, double *pSqrtSigma, long *prows,
+void rwishartn(int *pn, double *pdf, int *pd, double *pSqrtSigma, int *prows,
                 double *pW)
 {
-  long n, d, d2, i, j, k, h, irows;
+  int n, d, d2, i, j, k, h, irows;
   double df, sm, *Z, *Zsig;
   n = *pn;
   df = *pdf;
@@ -124,9 +124,9 @@
   Free(Zsig);
 }
 
-void rwishart1s(double *pdf, long *pd, double *pSqrtSigma, double *pW)
+void rwishart1s(double *pdf, int *pd, double *pSqrtSigma, double *pW)
 {
-  long d, d2, i, j, k, h;
+  int d, d2, i, j, k, h;
   double df, sm, *Z, *Zsig;
   df = *pdf;
   d = *pd;
@@ -173,9 +173,9 @@
   Free(Zsig);
 }
 
-void rwishart1(double *pdf, long *pd, double *pSqrtSigma, double *pW)
+void rwishart1(double *pdf, int *pd, double *pSqrtSigma, double *pW)
 {
-  long d, d2, i, j, k, h;
+  int d, d2, j, k, h;
   double df, sm, *Z, *Zsig;
   df = *pdf;
   d = *pd;
@@ -216,32 +216,32 @@
   Free(Zsig);
 }
 
-void trwish1(double *pdf, long *pd, double *pSqrtSigma, double *pW)
+void trwish1(double *pdf, int *pd, double *pSqrtSigma, double *pW)
 {
   GetRNGstate();
   rwishart1(pdf, pd, pSqrtSigma, pW);
   PutRNGstate();
 }
 
-void rgammans(long *pn, double *shape, double *scale, double *ans)
+void rgammans(int *pn, double *shape, double *scale, double *ans)
 {
-  long n, i;
+  int n, i;
   n = *pn;
   GetRNGstate();
   for(i=0;i<n;i++) *(ans+i) = rgamma(*shape, *scale);
   PutRNGstate();
 }
 
-void rgamman(long *pn, double *shape, double *scale, double *ans)
+void rgamman(int *pn, double *shape, double *scale, double *ans)
 {
-  long n, i;
+  int n, i;
   n = *pn;
   for(i=0;i<n;i++) *(ans+i) = rgamma(*shape, *scale);
 }
 
-void rnormns(long *pn, double *ans)
+void rnormns(int *pn, double *ans)
 {
-	long i,n;
+	int i,n;
 	n = *pn;
 
         GetRNGstate();
@@ -252,9 +252,9 @@
 	PutRNGstate();
 }
 
-void rnormn(long *pn, double *ans)
+void rnormn(int *pn, double *ans)
 {
-  long i,n;
+  int i,n;
   n = *pn;
 
   for (i=0;i<n;i++)
diff -ru SharedHT2/src/rowchol.c ../SharedHT2/src/rowchol.c
--- SharedHT2/src/rowchol.c	2004-05-06 18:35:30.000000000 +0100
+++ ../SharedHT2/src/rowchol.c	2005-08-24 10:34:48.000000000 +0100
@@ -1,9 +1,9 @@
-void chol(double *s, double *t, long *pd);
+void chol(double *s, double *t, int *pd);
 
-void rowchol(double *x, double *z, long *pn, long *pnx)
+void rowchol(double *x, double *z, int *pn, int *pnx)
 {
 
-        long n, nx, l;
+        int n, nx, l;
 
         n = *pn;
         nx = *pnx;
diff -ru SharedHT2/src/rowinv.c ../SharedHT2/src/rowinv.c
--- SharedHT2/src/rowinv.c	2004-05-04 19:53:48.000000000 +0100
+++ ../SharedHT2/src/rowinv.c	2005-08-24 10:35:13.000000000 +0100
@@ -1,9 +1,9 @@
-void matinv(double *a, double *yvv, long *pm);
+void matinv(double *a, double *yvv, int *pm);
 
-void rowinv(double *x, double *z, long *pn, long *pnx)
+void rowinv(double *x, double *z, int *pn, int *pnx)
 {
 
-        long n, nx, l;
+        int n, nx, l;
 
         n = *pn;
         nx = *pnx;
diff -ru SharedHT2/src/rowprod.c ../SharedHT2/src/rowprod.c
--- SharedHT2/src/rowprod.c	2004-05-04 01:52:56.000000000 +0100
+++ ../SharedHT2/src/rowprod.c	2005-08-24 10:35:26.000000000 +0100
@@ -1,6 +1,6 @@
-void rowprod(double *x, double *y, double *z, long *pn, long *pna1, long *pnb1, long *pnb2){
+void rowprod(double *x, double *y, double *z, int *pn, int *pna1, int *pnb1, int *pnb2){
 
-        long n, na1, nb1, nb2, l, i, j, k;
+        int n, na1, nb1, nb2, l, i, j, k;
         double s;
 	n = *pn;
         na1 = *pna1;
